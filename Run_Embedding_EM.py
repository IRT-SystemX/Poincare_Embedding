# -*- coding: utf-8 -*-
from EM_Embedding.Launch_Multi_Process_EM_Embed import *
#Multiprocessing parameters


if __name__ == '__main__':

    file_name = "Karate.txt"    #Specify the example name

    number_processes = 1        #Number of processes in parallel

    Embedding_Parameters = dict(

        nstep=10,               # Length of the walks generated by the Random Walk algorithm
        context=5,              # Large data set: take context between 15 and 20
        nepoch= 5,              # Number of iterations of gradient descent
        p_gradient=2,           # Only Hyperbolic
        negsample=3,            # Quoted Our experiments indicate that values of negsample in the range 5–20 are useful for small training datasets
                                # while for large datasets the k can be as small as 2-5
        number_poincare_disks = 1,
                                # For multi-dimensional settings, we work in the product of many Poincaré disks
        type=0                  # type = 0 for Social networks and type = 1 for word embedding  (the cost function is different for each case)

    )

    EM_Parameters = dict(

        M = 2,                  # Number of Gaussians used in the mix (also the number of classes)
        iter_max = 20,          # Maximum number of EM iterations
        iter = 2                #Community detection loop number of iterations

    )

    Plot_Parameters = dict(     #Requires matplotlib
        plot_or_no = True       #Set to False if you do not wish to plot (Not recommanded for number of disks > 5 or data size > 1000)

    )

    Performance_Computation_Parameters = dict(

        truth_check = True      #Put True if a ground truth file is put in the directory and
                                #you would like to compute performances using it
                                #Assumption: The name of the ground truth is R_'file_name' and one label is written per line starting from 1,
                                #With the same order as the nodes of the input adjacency matrix
                                #For the moment the class of each node is attributed to the gaussian that gives the highest probability for the node
                                #BIC criterion can be implemented as a perspective
    )

    Launch_multiprocess_EM_Embed(number_processes, file_name, Embedding_Parameters, EM_Parameters, Performance_Computation_Parameters, Plot_Parameters)








